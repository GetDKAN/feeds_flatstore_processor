<?php

/**
 * @File
 *  Creates Feeds fetcher for storing Feeds results in a unique tables.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function feeds_flatstore_processor_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implements hook_feeds_after_parse().
 */
function hook_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  // Creates table for feed source if it doesn't exist.
}

/**
 * Recognize columns of data in the file (all except xls)
 */
function feeds_flatstore_find_columns($filepath, $separator = ",", $limit = 500) {
  static $size = 10000;
  $handle = fopen($filepath, 'r');
  if ($handle === FALSE) {
    drupal_set_message(t('Could not open !filename', array('!filename' => $filepath)));
    return FALSE;
  }

  $result['data'] = array();
  $rowcount = 0;
  while (($data = fgetcsv($handle, $size, ',')) !== FALSE) {
    $result['data'][] = $data;
    $rowcount++;
    if ($rowcount > $limit) {
      break;
    }
  }
  fclose($handle);
  $colcount = count($result['data'][0]);

  for ($j = 0; $j < $colcount; $j++) {
    $type_counter = array(
      'int' => 0,
      'text' => 0,
      'datetime' => 0,
      'float' => 0,
      'double' => 0,
      'geometry' => 0,
      'varchar' => 0,
    );
    for ($i = 1; $i < $rowcount; $i++) {
      if ($result['data'][$i][$j] == '') {
        continue;
      }
      // Int.
      if (preg_match('/^-?\d+$/', $result['data'][$i][$j])) {
        $result['type'][$j] = 'int';
        $type_counter['int']++;
      }
      // Float.
      elseif (preg_match('/^-?(?:\d+|\d*\.\d+)$/', trim($result['data'][$i][$j]))) {
        $result['type'][$j] = 'float';
        $type_counter['float']++;
      }
      // Double.
      elseif (preg_match('/[^0-9][0-9]+(\.[0-9]+)?[^0-9]/', trim($result['data'][$i][$j]))) {
        $result['type'][$j] = 'double';
        $type_counter['double']++;
      }
      // Datetime.
      elseif (preg_match("/\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}/", trim($result['data'][$i][$j])) ||
              preg_match("/\d{2}\-\d{2}\-\d{4} \d{2}:\d{2}:\d{2}/", trim($result['data'][$i][$j])) ||
              preg_match("/\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}/", trim($result['data'][$i][$j])) ||
              preg_match("/\d{2}\-\d{2}\-\d{4} \d{2}:\d{2}/", trim($result['data'][$i][$j])) ||
              preg_match("/\d{4}\/\d{2}\/\d{2}/", trim($result['data'][$i][$j])) ||
              preg_match("/\d{2}\.\d{2}\.\d{4}/", trim($result['data'][$i][$j]))) {
        $result['type'][$j] = 'datetime';
        $type_counter['datetime']++;
      }
      else {
        $result['type'][$j] = 'text';
        $type_counter['text']++;
      }
    }
    $max = max($type_counter);
    if ($max == 0)
      $result['type'][$j] = 'varchar';
    else {
      foreach ($type_counter as $key => $value) {
        if ($value == $max) {
          $result['type'][$j] = $key;
        }
      }
    }
  }
  return $result;
}


/**
 * Implements hook_feeds_plugins().
 */
function feeds_flatstore_processor_feeds_plugins() {
  $path = drupal_get_path('module', 'feeds_flatstore_processor');

  return array(
    'FeedsFlatstoreProcessor' => array(
      'name' => 'Field Data Processor',
      'description' => 'Imports source data into unique database tables identified by the entity id they are attached to.',
      'help' => 'Imports source data into unique database tables identified by the entity id they are attached to.',
      'handler' => array(
        'parent' => 'FeedsProcessor',
        'class' => 'FeedsFlatstoreProcessor',
        'file' => 'FeedsFlatstoreProcessor.inc',
        'path' => $path,
      ),
    ),
  );
}
